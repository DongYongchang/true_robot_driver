// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: overall_system_rtstate.proto

#include "overall_system_rtstate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace system_rtstate {
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.frame_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Ftvalue::Ftvalue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fx_)*/0
  , /*decltype(_impl_.fy_)*/0
  , /*decltype(_impl_.fz_)*/0
  , /*decltype(_impl_.mx_)*/0
  , /*decltype(_impl_.my_)*/0
  , /*decltype(_impl_.mz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FtvalueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtvalueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtvalueDefaultTypeInternal() {}
  union {
    Ftvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtvalueDefaultTypeInternal _Ftvalue_default_instance_;
PROTOBUF_CONSTEXPR Controller::Controller(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ftvalues_)*/{}
  , /*decltype(_impl_.controller_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.master_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.control_cycle_)*/0
  , /*decltype(_impl_.global_count_)*/int64_t{0}
  , /*decltype(_impl_.is_link_up_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerDefaultTypeInternal() {}
  union {
    Controller _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerDefaultTypeInternal _Controller_default_instance_;
PROTOBUF_CONSTEXPR Joint::Joint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joint_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.torque_)*/0
  , /*decltype(_impl_.is_enabled_)*/false
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.digit_output_)*/0
  , /*decltype(_impl_.sensor_torque_)*/0
  , /*decltype(_impl_.digit_input_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDefaultTypeInternal() {}
  union {
    Joint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDefaultTypeInternal _Joint_default_instance_;
PROTOBUF_CONSTEXPR Tool::Tool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolDefaultTypeInternal() {}
  union {
    Tool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolDefaultTypeInternal _Tool_default_instance_;
PROTOBUF_CONSTEXPR Wobj::Wobj(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.wobj_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WobjDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WobjDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WobjDefaultTypeInternal() {}
  union {
    Wobj _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WobjDefaultTypeInternal _Wobj_default_instance_;
PROTOBUF_CONSTEXPR Load::Load(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.load_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadDefaultTypeInternal() {}
  union {
    Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadDefaultTypeInternal _Load_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.robottarget_)*/{}
  , /*decltype(_impl_.jointtarget_)*/{}
  , /*decltype(_impl_.point_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tool_)*/nullptr
  , /*decltype(_impl_.wobj_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joint_)*/{}
  , /*decltype(_impl_.ee_pe321_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_func_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_func_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_point_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.model_state_)*/0
  , /*decltype(_impl_.model_time_rate_)*/0
  , /*decltype(_impl_.func_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR SystemRtState::SystemRtState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.controller_)*/nullptr
  , /*decltype(_impl_.system_running_state_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemRtStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemRtStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemRtStateDefaultTypeInternal() {}
  union {
    SystemRtState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemRtStateDefaultTypeInternal _SystemRtState_default_instance_;
}  // namespace system_rtstate
static ::_pb::Metadata file_level_metadata_overall_5fsystem_5frtstate_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_overall_5fsystem_5frtstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_overall_5fsystem_5frtstate_2eproto = nullptr;

const uint32_t TableStruct_overall_5fsystem_5frtstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Header, _impl_.frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.fx_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.fy_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.fz_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.mx_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.my_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Ftvalue, _impl_.mz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.controller_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.control_cycle_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.global_count_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.master_info_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.is_link_up_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Controller, _impl_.ftvalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.joint_type_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.torque_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.is_enabled_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.digit_output_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.digit_input_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Joint, _impl_.sensor_torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Tool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Tool, _impl_.tool_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Tool, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Wobj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Wobj, _impl_.wobj_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Wobj, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Load, _impl_.load_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Load, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _impl_.point_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _impl_.tool_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _impl_.wobj_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _impl_.robottarget_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Point, _impl_.jointtarget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.joint_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.current_point_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.error_msg_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.model_state_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.model_time_rate_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.current_func_name_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.current_func_info_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.func_count_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.info_msg_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::Model, _impl_.ee_pe321_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::SystemRtState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_rtstate::SystemRtState, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::SystemRtState, _impl_.system_running_state_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::SystemRtState, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::system_rtstate::SystemRtState, _impl_.controller_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::system_rtstate::Header)},
  { 8, -1, -1, sizeof(::system_rtstate::Ftvalue)},
  { 20, -1, -1, sizeof(::system_rtstate::Controller)},
  { 32, -1, -1, sizeof(::system_rtstate::Joint)},
  { 47, -1, -1, sizeof(::system_rtstate::Tool)},
  { 55, -1, -1, sizeof(::system_rtstate::Wobj)},
  { 63, -1, -1, sizeof(::system_rtstate::Load)},
  { 71, -1, -1, sizeof(::system_rtstate::Point)},
  { 82, -1, -1, sizeof(::system_rtstate::Model)},
  { 101, -1, -1, sizeof(::system_rtstate::SystemRtState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::system_rtstate::_Header_default_instance_._instance,
  &::system_rtstate::_Ftvalue_default_instance_._instance,
  &::system_rtstate::_Controller_default_instance_._instance,
  &::system_rtstate::_Joint_default_instance_._instance,
  &::system_rtstate::_Tool_default_instance_._instance,
  &::system_rtstate::_Wobj_default_instance_._instance,
  &::system_rtstate::_Load_default_instance_._instance,
  &::system_rtstate::_Point_default_instance_._instance,
  &::system_rtstate::_Model_default_instance_._instance,
  &::system_rtstate::_SystemRtState_default_instance_._instance,
};

const char descriptor_table_protodef_overall_5fsystem_5frtstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034overall_system_rtstate.proto\022\016system_r"
  "tstate\"-\n\006Header\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010f"
  "rame_id\030\002 \001(\003\"Q\n\007Ftvalue\022\n\n\002fx\030\001 \001(\001\022\n\n\002"
  "fy\030\002 \001(\001\022\n\n\002fz\030\003 \001(\001\022\n\n\002mx\030\004 \001(\001\022\n\n\002my\030\005"
  " \001(\001\022\n\n\002mz\030\006 \001(\001\"\246\001\n\nController\022\027\n\017contr"
  "oller_name\030\001 \001(\t\022\025\n\rcontrol_cycle\030\002 \001(\001\022"
  "\024\n\014global_count\030\003 \001(\003\022\023\n\013master_info\030\004 \001"
  "(\t\022\022\n\nis_link_up\030\005 \001(\010\022)\n\010ftvalues\030\006 \003(\013"
  "2\027.system_rtstate.Ftvalue\"\265\001\n\005Joint\022\022\n\nj"
  "oint_type\030\001 \001(\t\022\020\n\010position\030\002 \001(\001\022\016\n\006tor"
  "que\030\003 \001(\001\022\022\n\nis_enabled\030\004 \001(\010\022\014\n\004mode\030\005 "
  "\001(\005\022\022\n\nerror_code\030\006 \001(\005\022\024\n\014digit_output\030"
  "\007 \001(\005\022\023\n\013digit_input\030\010 \001(\005\022\025\n\rsensor_tor"
  "que\030\t \001(\001\"\'\n\004Tool\022\021\n\ttool_name\030\001 \001(\t\022\014\n\004"
  "data\030\002 \003(\001\"\'\n\004Wobj\022\021\n\twobj_name\030\001 \001(\t\022\014\n"
  "\004data\030\002 \003(\001\"\'\n\004Load\022\021\n\tload_name\030\001 \001(\t\022\014"
  "\n\004data\030\002 \003(\001\"\215\001\n\005Point\022\022\n\npoint_name\030\001 \001"
  "(\t\022\"\n\004tool\030\002 \001(\0132\024.system_rtstate.Tool\022\""
  "\n\004wobj\030\003 \001(\0132\024.system_rtstate.Wobj\022\023\n\013ro"
  "bottarget\030\004 \003(\001\022\023\n\013jointtarget\030\005 \003(\001\"\306\002\n"
  "\005Model\022\022\n\nmodel_name\030\001 \001(\t\022\022\n\nmodel_type"
  "\030\002 \001(\t\022$\n\005joint\030\003 \003(\0132\025.system_rtstate.J"
  "oint\022,\n\rcurrent_point\030\004 \001(\0132\025.system_rts"
  "tate.Point\022\022\n\nerror_code\030\005 \001(\005\022\021\n\terror_"
  "msg\030\006 \001(\t\022\023\n\013model_state\030\007 \001(\005\022\027\n\017model_"
  "time_rate\030\010 \001(\001\022\031\n\021current_func_name\030\t \001"
  "(\t\022\031\n\021current_func_info\030\n \001(\t\022\022\n\nfunc_co"
  "unt\030\013 \001(\005\022\020\n\010info_msg\030\014 \001(\t\022\020\n\010ee_pe321\030"
  "\r \003(\001\"\251\001\n\rSystemRtState\022$\n\004head\030\001 \001(\0132\026."
  "system_rtstate.Header\022\034\n\024system_running_"
  "state\030\002 \001(\010\022$\n\005model\030\003 \003(\0132\025.system_rtst"
  "ate.Model\022.\n\ncontroller\030\004 \001(\0132\032.system_r"
  "tstate.Controllerb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_overall_5fsystem_5frtstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_overall_5fsystem_5frtstate_2eproto = {
    false, false, 1305, descriptor_table_protodef_overall_5fsystem_5frtstate_2eproto,
    "overall_system_rtstate.proto",
    &descriptor_table_overall_5fsystem_5frtstate_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_overall_5fsystem_5frtstate_2eproto::offsets,
    file_level_metadata_overall_5fsystem_5frtstate_2eproto, file_level_enum_descriptors_overall_5fsystem_5frtstate_2eproto,
    file_level_service_descriptors_overall_5fsystem_5frtstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_overall_5fsystem_5frtstate_2eproto_getter() {
  return &descriptor_table_overall_5fsystem_5frtstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_overall_5fsystem_5frtstate_2eproto(&descriptor_table_overall_5fsystem_5frtstate_2eproto);
namespace system_rtstate {

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.frame_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_id_));
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.frame_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:system_rtstate.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_frame_id() != 0) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_)
      + sizeof(Header::_impl_.frame_id_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[0]);
}

// ===================================================================

class Ftvalue::_Internal {
 public:
};

Ftvalue::Ftvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Ftvalue)
}
Ftvalue::Ftvalue(const Ftvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ftvalue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fx_){}
    , decltype(_impl_.fy_){}
    , decltype(_impl_.fz_){}
    , decltype(_impl_.mx_){}
    , decltype(_impl_.my_){}
    , decltype(_impl_.mz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fx_, &from._impl_.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mz_) -
    reinterpret_cast<char*>(&_impl_.fx_)) + sizeof(_impl_.mz_));
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Ftvalue)
}

inline void Ftvalue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fx_){0}
    , decltype(_impl_.fy_){0}
    , decltype(_impl_.fz_){0}
    , decltype(_impl_.mx_){0}
    , decltype(_impl_.my_){0}
    , decltype(_impl_.mz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ftvalue::~Ftvalue() {
  // @@protoc_insertion_point(destructor:system_rtstate.Ftvalue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ftvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ftvalue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ftvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Ftvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mz_) -
      reinterpret_cast<char*>(&_impl_.fx_)) + sizeof(_impl_.mz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ftvalue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.fz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.mx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double my = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.my_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.mz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ftvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Ftvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double fx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_fx(), target);
  }

  // double fy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_fy(), target);
  }

  // double fz = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fz = this->_internal_fz();
  uint64_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fz(), target);
  }

  // double mx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mx = this->_internal_mx();
  uint64_t raw_mx;
  memcpy(&raw_mx, &tmp_mx, sizeof(tmp_mx));
  if (raw_mx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_mx(), target);
  }

  // double my = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_my = this->_internal_my();
  uint64_t raw_my;
  memcpy(&raw_my, &tmp_my, sizeof(tmp_my));
  if (raw_my != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_my(), target);
  }

  // double mz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mz = this->_internal_mz();
  uint64_t raw_mz;
  memcpy(&raw_mz, &tmp_mz, sizeof(tmp_mz));
  if (raw_mz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_mz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Ftvalue)
  return target;
}

size_t Ftvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Ftvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double fx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 8;
  }

  // double fy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    total_size += 1 + 8;
  }

  // double fz = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fz = this->_internal_fz();
  uint64_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    total_size += 1 + 8;
  }

  // double mx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mx = this->_internal_mx();
  uint64_t raw_mx;
  memcpy(&raw_mx, &tmp_mx, sizeof(tmp_mx));
  if (raw_mx != 0) {
    total_size += 1 + 8;
  }

  // double my = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_my = this->_internal_my();
  uint64_t raw_my;
  memcpy(&raw_my, &tmp_my, sizeof(tmp_my));
  if (raw_my != 0) {
    total_size += 1 + 8;
  }

  // double mz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mz = this->_internal_mz();
  uint64_t raw_mz;
  memcpy(&raw_mz, &tmp_mz, sizeof(tmp_mz));
  if (raw_mz != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ftvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ftvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ftvalue::GetClassData() const { return &_class_data_; }


void Ftvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ftvalue*>(&to_msg);
  auto& from = static_cast<const Ftvalue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Ftvalue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = from._internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _this->_internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = from._internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    _this->_internal_set_fy(from._internal_fy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fz = from._internal_fz();
  uint64_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    _this->_internal_set_fz(from._internal_fz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mx = from._internal_mx();
  uint64_t raw_mx;
  memcpy(&raw_mx, &tmp_mx, sizeof(tmp_mx));
  if (raw_mx != 0) {
    _this->_internal_set_mx(from._internal_mx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_my = from._internal_my();
  uint64_t raw_my;
  memcpy(&raw_my, &tmp_my, sizeof(tmp_my));
  if (raw_my != 0) {
    _this->_internal_set_my(from._internal_my());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mz = from._internal_mz();
  uint64_t raw_mz;
  memcpy(&raw_mz, &tmp_mz, sizeof(tmp_mz));
  if (raw_mz != 0) {
    _this->_internal_set_mz(from._internal_mz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ftvalue::CopyFrom(const Ftvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Ftvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ftvalue::IsInitialized() const {
  return true;
}

void Ftvalue::InternalSwap(Ftvalue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ftvalue, _impl_.mz_)
      + sizeof(Ftvalue::_impl_.mz_)
      - PROTOBUF_FIELD_OFFSET(Ftvalue, _impl_.fx_)>(
          reinterpret_cast<char*>(&_impl_.fx_),
          reinterpret_cast<char*>(&other->_impl_.fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ftvalue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[1]);
}

// ===================================================================

class Controller::_Internal {
 public:
};

Controller::Controller(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Controller)
}
Controller::Controller(const Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Controller* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ftvalues_){from._impl_.ftvalues_}
    , decltype(_impl_.controller_name_){}
    , decltype(_impl_.master_info_){}
    , decltype(_impl_.control_cycle_){}
    , decltype(_impl_.global_count_){}
    , decltype(_impl_.is_link_up_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.controller_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.controller_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_name().empty()) {
    _this->_impl_.controller_name_.Set(from._internal_controller_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.master_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master_info().empty()) {
    _this->_impl_.master_info_.Set(from._internal_master_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.control_cycle_, &from._impl_.control_cycle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_link_up_) -
    reinterpret_cast<char*>(&_impl_.control_cycle_)) + sizeof(_impl_.is_link_up_));
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Controller)
}

inline void Controller::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ftvalues_){arena}
    , decltype(_impl_.controller_name_){}
    , decltype(_impl_.master_info_){}
    , decltype(_impl_.control_cycle_){0}
    , decltype(_impl_.global_count_){int64_t{0}}
    , decltype(_impl_.is_link_up_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.controller_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.controller_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.master_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:system_rtstate.Controller)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Controller::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ftvalues_.~RepeatedPtrField();
  _impl_.controller_name_.Destroy();
  _impl_.master_info_.Destroy();
}

void Controller::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Controller)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ftvalues_.Clear();
  _impl_.controller_name_.ClearToEmpty();
  _impl_.master_info_.ClearToEmpty();
  ::memset(&_impl_.control_cycle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_link_up_) -
      reinterpret_cast<char*>(&_impl_.control_cycle_)) + sizeof(_impl_.is_link_up_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Controller::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string controller_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_controller_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Controller.controller_name"));
        } else
          goto handle_unusual;
        continue;
      // double control_cycle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.control_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 global_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.global_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string master_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_master_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Controller.master_info"));
        } else
          goto handle_unusual;
        continue;
      // bool is_link_up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_link_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .system_rtstate.Ftvalue ftvalues = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ftvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Controller::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Controller)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller_name = 1;
  if (!this->_internal_controller_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller_name().data(), static_cast<int>(this->_internal_controller_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Controller.controller_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controller_name(), target);
  }

  // double control_cycle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_cycle = this->_internal_control_cycle();
  uint64_t raw_control_cycle;
  memcpy(&raw_control_cycle, &tmp_control_cycle, sizeof(tmp_control_cycle));
  if (raw_control_cycle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_control_cycle(), target);
  }

  // int64 global_count = 3;
  if (this->_internal_global_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_global_count(), target);
  }

  // string master_info = 4;
  if (!this->_internal_master_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_master_info().data(), static_cast<int>(this->_internal_master_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Controller.master_info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_master_info(), target);
  }

  // bool is_link_up = 5;
  if (this->_internal_is_link_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_link_up(), target);
  }

  // repeated .system_rtstate.Ftvalue ftvalues = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ftvalues_size()); i < n; i++) {
    const auto& repfield = this->_internal_ftvalues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Controller)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_rtstate.Ftvalue ftvalues = 6;
  total_size += 1UL * this->_internal_ftvalues_size();
  for (const auto& msg : this->_impl_.ftvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string controller_name = 1;
  if (!this->_internal_controller_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller_name());
  }

  // string master_info = 4;
  if (!this->_internal_master_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_info());
  }

  // double control_cycle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_cycle = this->_internal_control_cycle();
  uint64_t raw_control_cycle;
  memcpy(&raw_control_cycle, &tmp_control_cycle, sizeof(tmp_control_cycle));
  if (raw_control_cycle != 0) {
    total_size += 1 + 8;
  }

  // int64 global_count = 3;
  if (this->_internal_global_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_global_count());
  }

  // bool is_link_up = 5;
  if (this->_internal_is_link_up() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Controller::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Controller::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Controller::GetClassData() const { return &_class_data_; }


void Controller::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Controller*>(&to_msg);
  auto& from = static_cast<const Controller&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Controller)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ftvalues_.MergeFrom(from._impl_.ftvalues_);
  if (!from._internal_controller_name().empty()) {
    _this->_internal_set_controller_name(from._internal_controller_name());
  }
  if (!from._internal_master_info().empty()) {
    _this->_internal_set_master_info(from._internal_master_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_cycle = from._internal_control_cycle();
  uint64_t raw_control_cycle;
  memcpy(&raw_control_cycle, &tmp_control_cycle, sizeof(tmp_control_cycle));
  if (raw_control_cycle != 0) {
    _this->_internal_set_control_cycle(from._internal_control_cycle());
  }
  if (from._internal_global_count() != 0) {
    _this->_internal_set_global_count(from._internal_global_count());
  }
  if (from._internal_is_link_up() != 0) {
    _this->_internal_set_is_link_up(from._internal_is_link_up());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::InternalSwap(Controller* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ftvalues_.InternalSwap(&other->_impl_.ftvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.controller_name_, lhs_arena,
      &other->_impl_.controller_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_info_, lhs_arena,
      &other->_impl_.master_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Controller, _impl_.is_link_up_)
      + sizeof(Controller::_impl_.is_link_up_)
      - PROTOBUF_FIELD_OFFSET(Controller, _impl_.control_cycle_)>(
          reinterpret_cast<char*>(&_impl_.control_cycle_),
          reinterpret_cast<char*>(&other->_impl_.control_cycle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Controller::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[2]);
}

// ===================================================================

class Joint::_Internal {
 public:
};

Joint::Joint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Joint)
}
Joint::Joint(const Joint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Joint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_type_){}
    , decltype(_impl_.position_){}
    , decltype(_impl_.torque_){}
    , decltype(_impl_.is_enabled_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.digit_output_){}
    , decltype(_impl_.sensor_torque_){}
    , decltype(_impl_.digit_input_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.joint_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.joint_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_joint_type().empty()) {
    _this->_impl_.joint_type_.Set(from._internal_joint_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.digit_input_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.digit_input_));
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Joint)
}

inline void Joint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_type_){}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.torque_){0}
    , decltype(_impl_.is_enabled_){false}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.digit_output_){0}
    , decltype(_impl_.sensor_torque_){0}
    , decltype(_impl_.digit_input_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.joint_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.joint_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:system_rtstate.Joint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Joint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.joint_type_.Destroy();
}

void Joint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Joint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joint_type_.ClearToEmpty();
  ::memset(&_impl_.position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.digit_input_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.digit_input_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Joint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string joint_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_joint_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Joint.joint_type"));
        } else
          goto handle_unusual;
        continue;
      // double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 digit_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.digit_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 digit_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.digit_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double sensor_torque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.sensor_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Joint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Joint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string joint_type = 1;
  if (!this->_internal_joint_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joint_type().data(), static_cast<int>(this->_internal_joint_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Joint.joint_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_joint_type(), target);
  }

  // double position = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_position(), target);
  }

  // double torque = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torque = this->_internal_torque();
  uint64_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque(), target);
  }

  // bool is_enabled = 4;
  if (this->_internal_is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_enabled(), target);
  }

  // int32 mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mode(), target);
  }

  // int32 error_code = 6;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_error_code(), target);
  }

  // int32 digit_output = 7;
  if (this->_internal_digit_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_digit_output(), target);
  }

  // int32 digit_input = 8;
  if (this->_internal_digit_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_digit_input(), target);
  }

  // double sensor_torque = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sensor_torque = this->_internal_sensor_torque();
  uint64_t raw_sensor_torque;
  memcpy(&raw_sensor_torque, &tmp_sensor_torque, sizeof(tmp_sensor_torque));
  if (raw_sensor_torque != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_sensor_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Joint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string joint_type = 1;
  if (!this->_internal_joint_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joint_type());
  }

  // double position = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    total_size += 1 + 8;
  }

  // double torque = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torque = this->_internal_torque();
  uint64_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    total_size += 1 + 8;
  }

  // bool is_enabled = 4;
  if (this->_internal_is_enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // int32 error_code = 6;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  // int32 digit_output = 7;
  if (this->_internal_digit_output() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_digit_output());
  }

  // double sensor_torque = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sensor_torque = this->_internal_sensor_torque();
  uint64_t raw_sensor_torque;
  memcpy(&raw_sensor_torque, &tmp_sensor_torque, sizeof(tmp_sensor_torque));
  if (raw_sensor_torque != 0) {
    total_size += 1 + 8;
  }

  // int32 digit_input = 8;
  if (this->_internal_digit_input() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_digit_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Joint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Joint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Joint::GetClassData() const { return &_class_data_; }


void Joint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Joint*>(&to_msg);
  auto& from = static_cast<const Joint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Joint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_joint_type().empty()) {
    _this->_internal_set_joint_type(from._internal_joint_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_position = from._internal_position();
  uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torque = from._internal_torque();
  uint64_t raw_torque;
  memcpy(&raw_torque, &tmp_torque, sizeof(tmp_torque));
  if (raw_torque != 0) {
    _this->_internal_set_torque(from._internal_torque());
  }
  if (from._internal_is_enabled() != 0) {
    _this->_internal_set_is_enabled(from._internal_is_enabled());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_digit_output() != 0) {
    _this->_internal_set_digit_output(from._internal_digit_output());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sensor_torque = from._internal_sensor_torque();
  uint64_t raw_sensor_torque;
  memcpy(&raw_sensor_torque, &tmp_sensor_torque, sizeof(tmp_sensor_torque));
  if (raw_sensor_torque != 0) {
    _this->_internal_set_sensor_torque(from._internal_sensor_torque());
  }
  if (from._internal_digit_input() != 0) {
    _this->_internal_set_digit_input(from._internal_digit_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::InternalSwap(Joint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.joint_type_, lhs_arena,
      &other->_impl_.joint_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joint, _impl_.digit_input_)
      + sizeof(Joint::_impl_.digit_input_)
      - PROTOBUF_FIELD_OFFSET(Joint, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[3]);
}

// ===================================================================

class Tool::_Internal {
 public:
};

Tool::Tool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Tool)
}
Tool::Tool(const Tool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Tool)
}

inline void Tool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tool::~Tool() {
  // @@protoc_insertion_point(destructor:system_rtstate.Tool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.tool_name_.Destroy();
}

void Tool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tool::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Tool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.tool_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Tool.tool_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Tool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Tool.tool_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Tool)
  return target;
}

size_t Tool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Tool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tool::GetClassData() const { return &_class_data_; }


void Tool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tool*>(&to_msg);
  auto& from = static_cast<const Tool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Tool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tool::CopyFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tool::IsInitialized() const {
  return true;
}

void Tool::InternalSwap(Tool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[4]);
}

// ===================================================================

class Wobj::_Internal {
 public:
};

Wobj::Wobj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Wobj)
}
Wobj::Wobj(const Wobj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Wobj* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.wobj_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wobj_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wobj_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wobj_name().empty()) {
    _this->_impl_.wobj_name_.Set(from._internal_wobj_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Wobj)
}

inline void Wobj::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.wobj_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.wobj_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wobj_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Wobj::~Wobj() {
  // @@protoc_insertion_point(destructor:system_rtstate.Wobj)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wobj::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.wobj_name_.Destroy();
}

void Wobj::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wobj::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Wobj)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.wobj_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wobj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string wobj_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_wobj_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Wobj.wobj_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wobj::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Wobj)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string wobj_name = 1;
  if (!this->_internal_wobj_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wobj_name().data(), static_cast<int>(this->_internal_wobj_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Wobj.wobj_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_wobj_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Wobj)
  return target;
}

size_t Wobj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Wobj)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string wobj_name = 1;
  if (!this->_internal_wobj_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wobj_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wobj::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Wobj::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wobj::GetClassData() const { return &_class_data_; }


void Wobj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Wobj*>(&to_msg);
  auto& from = static_cast<const Wobj&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Wobj)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_wobj_name().empty()) {
    _this->_internal_set_wobj_name(from._internal_wobj_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wobj::CopyFrom(const Wobj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Wobj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wobj::IsInitialized() const {
  return true;
}

void Wobj::InternalSwap(Wobj* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wobj_name_, lhs_arena,
      &other->_impl_.wobj_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Wobj::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[5]);
}

// ===================================================================

class Load::_Internal {
 public:
};

Load::Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Load)
}
Load::Load(const Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Load* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.load_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.load_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load_name().empty()) {
    _this->_impl_.load_name_.Set(from._internal_load_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Load)
}

inline void Load::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.load_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.load_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Load::~Load() {
  // @@protoc_insertion_point(destructor:system_rtstate.Load)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Load::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.load_name_.Destroy();
}

void Load::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Load::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Load)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.load_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Load::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string load_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_load_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Load.load_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Load::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Load)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_name = 1;
  if (!this->_internal_load_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_name().data(), static_cast<int>(this->_internal_load_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Load.load_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Load)
  return target;
}

size_t Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Load)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string load_name = 1;
  if (!this->_internal_load_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Load::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Load::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Load::GetClassData() const { return &_class_data_; }


void Load::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Load*>(&to_msg);
  auto& from = static_cast<const Load&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Load)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_load_name().empty()) {
    _this->_internal_set_load_name(from._internal_load_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Load::CopyFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Load::IsInitialized() const {
  return true;
}

void Load::InternalSwap(Load* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_name_, lhs_arena,
      &other->_impl_.load_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Load::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[6]);
}

// ===================================================================

class Point::_Internal {
 public:
  static const ::system_rtstate::Tool& tool(const Point* msg);
  static const ::system_rtstate::Wobj& wobj(const Point* msg);
};

const ::system_rtstate::Tool&
Point::_Internal::tool(const Point* msg) {
  return *msg->_impl_.tool_;
}
const ::system_rtstate::Wobj&
Point::_Internal::wobj(const Point* msg) {
  return *msg->_impl_.wobj_;
}
Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.robottarget_){from._impl_.robottarget_}
    , decltype(_impl_.jointtarget_){from._impl_.jointtarget_}
    , decltype(_impl_.point_name_){}
    , decltype(_impl_.tool_){nullptr}
    , decltype(_impl_.wobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.point_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_name().empty()) {
    _this->_impl_.point_name_.Set(from._internal_point_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tool()) {
    _this->_impl_.tool_ = new ::system_rtstate::Tool(*from._impl_.tool_);
  }
  if (from._internal_has_wobj()) {
    _this->_impl_.wobj_ = new ::system_rtstate::Wobj(*from._impl_.wobj_);
  }
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.robottarget_){arena}
    , decltype(_impl_.jointtarget_){arena}
    , decltype(_impl_.point_name_){}
    , decltype(_impl_.tool_){nullptr}
    , decltype(_impl_.wobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.point_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:system_rtstate.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.robottarget_.~RepeatedField();
  _impl_.jointtarget_.~RepeatedField();
  _impl_.point_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tool_;
  if (this != internal_default_instance()) delete _impl_.wobj_;
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robottarget_.Clear();
  _impl_.jointtarget_.Clear();
  _impl_.point_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tool_ != nullptr) {
    delete _impl_.tool_;
  }
  _impl_.tool_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wobj_ != nullptr) {
    delete _impl_.wobj_;
  }
  _impl_.wobj_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string point_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_point_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Point.point_name"));
        } else
          goto handle_unusual;
        continue;
      // .system_rtstate.Tool tool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .system_rtstate.Wobj wobj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wobj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double robottarget = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_robottarget(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_robottarget(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double jointtarget = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_jointtarget(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_jointtarget(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string point_name = 1;
  if (!this->_internal_point_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_point_name().data(), static_cast<int>(this->_internal_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Point.point_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_point_name(), target);
  }

  // .system_rtstate.Tool tool = 2;
  if (this->_internal_has_tool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tool(this),
        _Internal::tool(this).GetCachedSize(), target, stream);
  }

  // .system_rtstate.Wobj wobj = 3;
  if (this->_internal_has_wobj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::wobj(this),
        _Internal::wobj(this).GetCachedSize(), target, stream);
  }

  // repeated double robottarget = 4;
  if (this->_internal_robottarget_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_robottarget(), target);
  }

  // repeated double jointtarget = 5;
  if (this->_internal_jointtarget_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_jointtarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double robottarget = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_robottarget_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double jointtarget = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_jointtarget_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string point_name = 1;
  if (!this->_internal_point_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_point_name());
  }

  // .system_rtstate.Tool tool = 2;
  if (this->_internal_has_tool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tool_);
  }

  // .system_rtstate.Wobj wobj = 3;
  if (this->_internal_has_wobj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wobj_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.robottarget_.MergeFrom(from._impl_.robottarget_);
  _this->_impl_.jointtarget_.MergeFrom(from._impl_.jointtarget_);
  if (!from._internal_point_name().empty()) {
    _this->_internal_set_point_name(from._internal_point_name());
  }
  if (from._internal_has_tool()) {
    _this->_internal_mutable_tool()->::system_rtstate::Tool::MergeFrom(
        from._internal_tool());
  }
  if (from._internal_has_wobj()) {
    _this->_internal_mutable_wobj()->::system_rtstate::Wobj::MergeFrom(
        from._internal_wobj());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.robottarget_.InternalSwap(&other->_impl_.robottarget_);
  _impl_.jointtarget_.InternalSwap(&other->_impl_.jointtarget_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_name_, lhs_arena,
      &other->_impl_.point_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.wobj_)
      + sizeof(Point::_impl_.wobj_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.tool_)>(
          reinterpret_cast<char*>(&_impl_.tool_),
          reinterpret_cast<char*>(&other->_impl_.tool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[7]);
}

// ===================================================================

class Model::_Internal {
 public:
  static const ::system_rtstate::Point& current_point(const Model* msg);
};

const ::system_rtstate::Point&
Model::_Internal::current_point(const Model* msg) {
  return *msg->_impl_.current_point_;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Model* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_){from._impl_.joint_}
    , decltype(_impl_.ee_pe321_){from._impl_.ee_pe321_}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.current_func_name_){}
    , decltype(_impl_.current_func_info_){}
    , decltype(_impl_.info_msg_){}
    , decltype(_impl_.current_point_){nullptr}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.model_state_){}
    , decltype(_impl_.model_time_rate_){}
    , decltype(_impl_.func_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type().empty()) {
    _this->_impl_.model_type_.Set(from._internal_model_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    _this->_impl_.error_msg_.Set(from._internal_error_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_func_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_func_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_func_name().empty()) {
    _this->_impl_.current_func_name_.Set(from._internal_current_func_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_func_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_func_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_func_info().empty()) {
    _this->_impl_.current_func_info_.Set(from._internal_current_func_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info_msg().empty()) {
    _this->_impl_.info_msg_.Set(from._internal_info_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_current_point()) {
    _this->_impl_.current_point_ = new ::system_rtstate::Point(*from._impl_.current_point_);
  }
  ::memcpy(&_impl_.error_code_, &from._impl_.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.func_count_) -
    reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.func_count_));
  // @@protoc_insertion_point(copy_constructor:system_rtstate.Model)
}

inline void Model::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_){arena}
    , decltype(_impl_.ee_pe321_){arena}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.current_func_name_){}
    , decltype(_impl_.current_func_info_){}
    , decltype(_impl_.info_msg_){}
    , decltype(_impl_.current_point_){nullptr}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.model_state_){0}
    , decltype(_impl_.model_time_rate_){0}
    , decltype(_impl_.func_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_func_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_func_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_func_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_func_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:system_rtstate.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.joint_.~RepeatedPtrField();
  _impl_.ee_pe321_.~RepeatedField();
  _impl_.model_name_.Destroy();
  _impl_.model_type_.Destroy();
  _impl_.error_msg_.Destroy();
  _impl_.current_func_name_.Destroy();
  _impl_.current_func_info_.Destroy();
  _impl_.info_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.current_point_;
}

void Model::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joint_.Clear();
  _impl_.ee_pe321_.Clear();
  _impl_.model_name_.ClearToEmpty();
  _impl_.model_type_.ClearToEmpty();
  _impl_.error_msg_.ClearToEmpty();
  _impl_.current_func_name_.ClearToEmpty();
  _impl_.current_func_info_.ClearToEmpty();
  _impl_.info_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.current_point_ != nullptr) {
    delete _impl_.current_point_;
  }
  _impl_.current_point_ = nullptr;
  ::memset(&_impl_.error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.func_count_) -
      reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.func_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.model_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_rtstate.Joint joint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .system_rtstate.Point current_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.error_msg"));
        } else
          goto handle_unusual;
        continue;
      // int32 model_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.model_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double model_time_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.model_time_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string current_func_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_current_func_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.current_func_name"));
        } else
          goto handle_unusual;
        continue;
      // string current_func_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_current_func_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.current_func_info"));
        } else
          goto handle_unusual;
        continue;
      // int32 func_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.func_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info_msg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_info_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_rtstate.Model.info_msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated double ee_pe321 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ee_pe321(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 105) {
          _internal_add_ee_pe321(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // string model_type = 2;
  if (!this->_internal_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // repeated .system_rtstate.Joint joint = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_joint_size()); i < n; i++) {
    const auto& repfield = this->_internal_joint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .system_rtstate.Point current_point = 4;
  if (this->_internal_has_current_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::current_point(this),
        _Internal::current_point(this).GetCachedSize(), target, stream);
  }

  // int32 error_code = 5;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_error_code(), target);
  }

  // string error_msg = 6;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.error_msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_msg(), target);
  }

  // int32 model_state = 7;
  if (this->_internal_model_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_model_state(), target);
  }

  // double model_time_rate = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_time_rate = this->_internal_model_time_rate();
  uint64_t raw_model_time_rate;
  memcpy(&raw_model_time_rate, &tmp_model_time_rate, sizeof(tmp_model_time_rate));
  if (raw_model_time_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_model_time_rate(), target);
  }

  // string current_func_name = 9;
  if (!this->_internal_current_func_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_func_name().data(), static_cast<int>(this->_internal_current_func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.current_func_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_current_func_name(), target);
  }

  // string current_func_info = 10;
  if (!this->_internal_current_func_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_func_info().data(), static_cast<int>(this->_internal_current_func_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.current_func_info");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_current_func_info(), target);
  }

  // int32 func_count = 11;
  if (this->_internal_func_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_func_count(), target);
  }

  // string info_msg = 12;
  if (!this->_internal_info_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info_msg().data(), static_cast<int>(this->_internal_info_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_rtstate.Model.info_msg");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_info_msg(), target);
  }

  // repeated double ee_pe321 = 13;
  if (this->_internal_ee_pe321_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_ee_pe321(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_rtstate.Joint joint = 3;
  total_size += 1UL * this->_internal_joint_size();
  for (const auto& msg : this->_impl_.joint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double ee_pe321 = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ee_pe321_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string model_type = 2;
  if (!this->_internal_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // string error_msg = 6;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // string current_func_name = 9;
  if (!this->_internal_current_func_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_func_name());
  }

  // string current_func_info = 10;
  if (!this->_internal_current_func_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_func_info());
  }

  // string info_msg = 12;
  if (!this->_internal_info_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info_msg());
  }

  // .system_rtstate.Point current_point = 4;
  if (this->_internal_has_current_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_point_);
  }

  // int32 error_code = 5;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  // int32 model_state = 7;
  if (this->_internal_model_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_state());
  }

  // double model_time_rate = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_time_rate = this->_internal_model_time_rate();
  uint64_t raw_model_time_rate;
  memcpy(&raw_model_time_rate, &tmp_model_time_rate, sizeof(tmp_model_time_rate));
  if (raw_model_time_rate != 0) {
    total_size += 1 + 8;
  }

  // int32 func_count = 11;
  if (this->_internal_func_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_func_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }


void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Model*>(&to_msg);
  auto& from = static_cast<const Model&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.Model)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.joint_.MergeFrom(from._impl_.joint_);
  _this->_impl_.ee_pe321_.MergeFrom(from._impl_.ee_pe321_);
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_model_type().empty()) {
    _this->_internal_set_model_type(from._internal_model_type());
  }
  if (!from._internal_error_msg().empty()) {
    _this->_internal_set_error_msg(from._internal_error_msg());
  }
  if (!from._internal_current_func_name().empty()) {
    _this->_internal_set_current_func_name(from._internal_current_func_name());
  }
  if (!from._internal_current_func_info().empty()) {
    _this->_internal_set_current_func_info(from._internal_current_func_info());
  }
  if (!from._internal_info_msg().empty()) {
    _this->_internal_set_info_msg(from._internal_info_msg());
  }
  if (from._internal_has_current_point()) {
    _this->_internal_mutable_current_point()->::system_rtstate::Point::MergeFrom(
        from._internal_current_point());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_model_state() != 0) {
    _this->_internal_set_model_state(from._internal_model_state());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_time_rate = from._internal_model_time_rate();
  uint64_t raw_model_time_rate;
  memcpy(&raw_model_time_rate, &tmp_model_time_rate, sizeof(tmp_model_time_rate));
  if (raw_model_time_rate != 0) {
    _this->_internal_set_model_time_rate(from._internal_model_time_rate());
  }
  if (from._internal_func_count() != 0) {
    _this->_internal_set_func_count(from._internal_func_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joint_.InternalSwap(&other->_impl_.joint_);
  _impl_.ee_pe321_.InternalSwap(&other->_impl_.ee_pe321_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_, lhs_arena,
      &other->_impl_.model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_msg_, lhs_arena,
      &other->_impl_.error_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_func_name_, lhs_arena,
      &other->_impl_.current_func_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_func_info_, lhs_arena,
      &other->_impl_.current_func_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_msg_, lhs_arena,
      &other->_impl_.info_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Model, _impl_.func_count_)
      + sizeof(Model::_impl_.func_count_)
      - PROTOBUF_FIELD_OFFSET(Model, _impl_.current_point_)>(
          reinterpret_cast<char*>(&_impl_.current_point_),
          reinterpret_cast<char*>(&other->_impl_.current_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[8]);
}

// ===================================================================

class SystemRtState::_Internal {
 public:
  static const ::system_rtstate::Header& head(const SystemRtState* msg);
  static const ::system_rtstate::Controller& controller(const SystemRtState* msg);
};

const ::system_rtstate::Header&
SystemRtState::_Internal::head(const SystemRtState* msg) {
  return *msg->_impl_.head_;
}
const ::system_rtstate::Controller&
SystemRtState::_Internal::controller(const SystemRtState* msg) {
  return *msg->_impl_.controller_;
}
SystemRtState::SystemRtState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_rtstate.SystemRtState)
}
SystemRtState::SystemRtState(const SystemRtState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemRtState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){from._impl_.model_}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.controller_){nullptr}
    , decltype(_impl_.system_running_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::system_rtstate::Header(*from._impl_.head_);
  }
  if (from._internal_has_controller()) {
    _this->_impl_.controller_ = new ::system_rtstate::Controller(*from._impl_.controller_);
  }
  _this->_impl_.system_running_state_ = from._impl_.system_running_state_;
  // @@protoc_insertion_point(copy_constructor:system_rtstate.SystemRtState)
}

inline void SystemRtState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){arena}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.controller_){nullptr}
    , decltype(_impl_.system_running_state_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SystemRtState::~SystemRtState() {
  // @@protoc_insertion_point(destructor:system_rtstate.SystemRtState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemRtState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
  if (this != internal_default_instance()) delete _impl_.controller_;
}

void SystemRtState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemRtState::Clear() {
// @@protoc_insertion_point(message_clear_start:system_rtstate.SystemRtState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.controller_ != nullptr) {
    delete _impl_.controller_;
  }
  _impl_.controller_ = nullptr;
  _impl_.system_running_state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemRtState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .system_rtstate.Header head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool system_running_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.system_running_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .system_rtstate.Model model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .system_rtstate.Controller controller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemRtState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_rtstate.SystemRtState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .system_rtstate.Header head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // bool system_running_state = 2;
  if (this->_internal_system_running_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_system_running_state(), target);
  }

  // repeated .system_rtstate.Model model = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_size()); i < n; i++) {
    const auto& repfield = this->_internal_model(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .system_rtstate.Controller controller = 4;
  if (this->_internal_has_controller()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::controller(this),
        _Internal::controller(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_rtstate.SystemRtState)
  return target;
}

size_t SystemRtState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_rtstate.SystemRtState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_rtstate.Model model = 3;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->_impl_.model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .system_rtstate.Header head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // .system_rtstate.Controller controller = 4;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controller_);
  }

  // bool system_running_state = 2;
  if (this->_internal_system_running_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemRtState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemRtState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemRtState::GetClassData() const { return &_class_data_; }


void SystemRtState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemRtState*>(&to_msg);
  auto& from = static_cast<const SystemRtState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_rtstate.SystemRtState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_.MergeFrom(from._impl_.model_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::system_rtstate::Header::MergeFrom(
        from._internal_head());
  }
  if (from._internal_has_controller()) {
    _this->_internal_mutable_controller()->::system_rtstate::Controller::MergeFrom(
        from._internal_controller());
  }
  if (from._internal_system_running_state() != 0) {
    _this->_internal_set_system_running_state(from._internal_system_running_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemRtState::CopyFrom(const SystemRtState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_rtstate.SystemRtState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemRtState::IsInitialized() const {
  return true;
}

void SystemRtState::InternalSwap(SystemRtState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_.InternalSwap(&other->_impl_.model_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemRtState, _impl_.system_running_state_)
      + sizeof(SystemRtState::_impl_.system_running_state_)
      - PROTOBUF_FIELD_OFFSET(SystemRtState, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemRtState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5frtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5frtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5frtstate_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace system_rtstate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::system_rtstate::Header*
Arena::CreateMaybeMessage< ::system_rtstate::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Ftvalue*
Arena::CreateMaybeMessage< ::system_rtstate::Ftvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Ftvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Controller*
Arena::CreateMaybeMessage< ::system_rtstate::Controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Controller >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Joint*
Arena::CreateMaybeMessage< ::system_rtstate::Joint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Joint >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Tool*
Arena::CreateMaybeMessage< ::system_rtstate::Tool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Tool >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Wobj*
Arena::CreateMaybeMessage< ::system_rtstate::Wobj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Wobj >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Load*
Arena::CreateMaybeMessage< ::system_rtstate::Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Load >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Point*
Arena::CreateMaybeMessage< ::system_rtstate::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::Model*
Arena::CreateMaybeMessage< ::system_rtstate::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::system_rtstate::SystemRtState*
Arena::CreateMaybeMessage< ::system_rtstate::SystemRtState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_rtstate::SystemRtState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
