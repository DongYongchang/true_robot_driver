// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: overall_system_nrtstate.proto

#include "overall_system_nrtstate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace system_nrtstate {
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.frame_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Slave::Slave(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slave_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phy_id_)*/0
  , /*decltype(_impl_.alias_)*/0
  , /*decltype(_impl_.slave_state_)*/0
  , /*decltype(_impl_.is_online_)*/0
  , /*decltype(_impl_.is_virtual_)*/false
  , /*decltype(_impl_.is_error_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SlaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlaveDefaultTypeInternal() {}
  union {
    Slave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlaveDefaultTypeInternal _Slave_default_instance_;
PROTOBUF_CONSTEXPR Controller::Controller(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slave_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerDefaultTypeInternal() {}
  union {
    Controller _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerDefaultTypeInternal _Controller_default_instance_;
PROTOBUF_CONSTEXPR Joint::Joint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_position_)*/0
  , /*decltype(_impl_.min_position_)*/0
  , /*decltype(_impl_.max_vel_)*/0
  , /*decltype(_impl_.min_vel_)*/0
  , /*decltype(_impl_.max_acc_)*/0
  , /*decltype(_impl_.min_acc_)*/0
  , /*decltype(_impl_.max_collision_torque_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDefaultTypeInternal() {}
  union {
    Joint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDefaultTypeInternal _Joint_default_instance_;
PROTOBUF_CONSTEXPR Tool::Tool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.tool_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolDefaultTypeInternal() {}
  union {
    Tool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolDefaultTypeInternal _Tool_default_instance_;
PROTOBUF_CONSTEXPR Wobj::Wobj(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.wobj_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WobjDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WobjDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WobjDefaultTypeInternal() {}
  union {
    Wobj _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WobjDefaultTypeInternal _Wobj_default_instance_;
PROTOBUF_CONSTEXPR Load::Load(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.load_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadDefaultTypeInternal() {}
  union {
    Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadDefaultTypeInternal _Load_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.robottarget_)*/{}
  , /*decltype(_impl_.jointtarget_)*/{}
  , /*decltype(_impl_.point_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tool_)*/nullptr
  , /*decltype(_impl_.wobj_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joint_)*/{}
  , /*decltype(_impl_.tools_)*/{}
  , /*decltype(_impl_.wobjs_)*/{}
  , /*decltype(_impl_.loads_)*/{}
  , /*decltype(_impl_.teach_points_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR Subsystem::Subsystem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subsystem_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubsystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubsystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubsystemDefaultTypeInternal() {}
  union {
    Subsystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubsystemDefaultTypeInternal _Subsystem_default_instance_;
PROTOBUF_CONSTEXPR Sensor::Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;
PROTOBUF_CONSTEXPR Interface::Interface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceDefaultTypeInternal _Interface_default_instance_;
PROTOBUF_CONSTEXPR SystemNrtState::SystemNrtState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{}
  , /*decltype(_impl_.subsystem_)*/{}
  , /*decltype(_impl_.sensor_)*/{}
  , /*decltype(_impl_.interface_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.controller_)*/nullptr
  , /*decltype(_impl_.system_running_state_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemNrtStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemNrtStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemNrtStateDefaultTypeInternal() {}
  union {
    SystemNrtState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemNrtStateDefaultTypeInternal _SystemNrtState_default_instance_;
}  // namespace system_nrtstate
static ::_pb::Metadata file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_overall_5fsystem_5fnrtstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_overall_5fsystem_5fnrtstate_2eproto = nullptr;

const uint32_t TableStruct_overall_5fsystem_5fnrtstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Header, _impl_.frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.slave_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.phy_id_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.slave_state_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.is_online_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.is_virtual_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Slave, _impl_.is_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Controller, _impl_.slave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.max_position_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.min_position_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.max_vel_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.min_vel_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.max_acc_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.min_acc_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Joint, _impl_.max_collision_torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Tool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Tool, _impl_.tool_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Tool, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Wobj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Wobj, _impl_.wobj_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Wobj, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Load, _impl_.load_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Load, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _impl_.point_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _impl_.tool_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _impl_.wobj_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _impl_.robottarget_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Point, _impl_.jointtarget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.joint_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.tools_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.wobjs_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.loads_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Model, _impl_.teach_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Subsystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Subsystem, _impl_.subsystem_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Subsystem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Subsystem, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Sensor, _impl_.sensor_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Sensor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Sensor, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Interface, _impl_.interface_name_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Interface, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::Interface, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.system_running_state_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.controller_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.subsystem_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.sensor_),
  PROTOBUF_FIELD_OFFSET(::system_nrtstate::SystemNrtState, _impl_.interface_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::system_nrtstate::Header)},
  { 8, -1, -1, sizeof(::system_nrtstate::Slave)},
  { 21, -1, -1, sizeof(::system_nrtstate::Controller)},
  { 28, -1, -1, sizeof(::system_nrtstate::Joint)},
  { 41, -1, -1, sizeof(::system_nrtstate::Tool)},
  { 49, -1, -1, sizeof(::system_nrtstate::Wobj)},
  { 57, -1, -1, sizeof(::system_nrtstate::Load)},
  { 65, -1, -1, sizeof(::system_nrtstate::Point)},
  { 76, -1, -1, sizeof(::system_nrtstate::Model)},
  { 89, -1, -1, sizeof(::system_nrtstate::Subsystem)},
  { 98, -1, -1, sizeof(::system_nrtstate::Sensor)},
  { 107, -1, -1, sizeof(::system_nrtstate::Interface)},
  { 116, -1, -1, sizeof(::system_nrtstate::SystemNrtState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::system_nrtstate::_Header_default_instance_._instance,
  &::system_nrtstate::_Slave_default_instance_._instance,
  &::system_nrtstate::_Controller_default_instance_._instance,
  &::system_nrtstate::_Joint_default_instance_._instance,
  &::system_nrtstate::_Tool_default_instance_._instance,
  &::system_nrtstate::_Wobj_default_instance_._instance,
  &::system_nrtstate::_Load_default_instance_._instance,
  &::system_nrtstate::_Point_default_instance_._instance,
  &::system_nrtstate::_Model_default_instance_._instance,
  &::system_nrtstate::_Subsystem_default_instance_._instance,
  &::system_nrtstate::_Sensor_default_instance_._instance,
  &::system_nrtstate::_Interface_default_instance_._instance,
  &::system_nrtstate::_SystemNrtState_default_instance_._instance,
};

const char descriptor_table_protodef_overall_5fsystem_5fnrtstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035overall_system_nrtstate.proto\022\017system_"
  "nrtstate\"-\n\006Header\022\021\n\ttimestamp\030\001 \001(\003\022\020\n"
  "\010frame_id\030\002 \001(\003\"\210\001\n\005Slave\022\022\n\nslave_name\030"
  "\001 \001(\t\022\016\n\006phy_id\030\002 \001(\005\022\r\n\005alias\030\003 \001(\005\022\023\n\013"
  "slave_state\030\004 \001(\005\022\021\n\tis_online\030\005 \001(\005\022\022\n\n"
  "is_virtual\030\006 \001(\010\022\020\n\010is_error\030\007 \001(\010\"3\n\nCo"
  "ntroller\022%\n\005slave\030\001 \003(\0132\026.system_nrtstat"
  "e.Slave\"\225\001\n\005Joint\022\024\n\014max_position\030\001 \001(\001\022"
  "\024\n\014min_position\030\002 \001(\001\022\017\n\007max_vel\030\003 \001(\001\022\017"
  "\n\007min_vel\030\004 \001(\001\022\017\n\007max_acc\030\005 \001(\001\022\017\n\007min_"
  "acc\030\006 \001(\001\022\034\n\024max_collision_torque\030\007 \001(\001\""
  "\'\n\004Tool\022\021\n\ttool_name\030\001 \001(\t\022\014\n\004data\030\002 \003(\001"
  "\"\'\n\004Wobj\022\021\n\twobj_name\030\001 \001(\t\022\014\n\004data\030\002 \003("
  "\001\"\'\n\004Load\022\021\n\tload_name\030\001 \001(\t\022\014\n\004data\030\002 \003"
  "(\001\"\217\001\n\005Point\022\022\n\npoint_name\030\001 \001(\t\022#\n\004tool"
  "\030\002 \001(\0132\025.system_nrtstate.Tool\022#\n\004wobj\030\003 "
  "\001(\0132\025.system_nrtstate.Wobj\022\023\n\013robottarge"
  "t\030\004 \003(\001\022\023\n\013jointtarget\030\005 \003(\001\"\366\001\n\005Model\022\022"
  "\n\nmodel_name\030\001 \001(\t\022\022\n\nmodel_type\030\002 \001(\t\022%"
  "\n\005joint\030\003 \003(\0132\026.system_nrtstate.Joint\022$\n"
  "\005tools\030\005 \003(\0132\025.system_nrtstate.Tool\022$\n\005w"
  "objs\030\006 \003(\0132\025.system_nrtstate.Wobj\022$\n\005loa"
  "ds\030\007 \003(\0132\025.system_nrtstate.Load\022,\n\014teach"
  "_points\030\010 \003(\0132\026.system_nrtstate.Point\">\n"
  "\tSubsystem\022\026\n\016subsystem_name\030\001 \001(\t\022\n\n\002id"
  "\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\"8\n\006Sensor\022\023\n\013senso"
  "r_name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\""
  ">\n\tInterface\022\026\n\016interface_name\030\001 \001(\t\022\n\n\002"
  "id\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\"\264\002\n\016SystemNrtSta"
  "te\022%\n\004head\030\001 \001(\0132\027.system_nrtstate.Heade"
  "r\022\034\n\024system_running_state\030\002 \001(\010\022%\n\005model"
  "\030\003 \003(\0132\026.system_nrtstate.Model\022/\n\ncontro"
  "ller\030\004 \001(\0132\033.system_nrtstate.Controller\022"
  "-\n\tsubsystem\030\005 \003(\0132\032.system_nrtstate.Sub"
  "system\022\'\n\006sensor\030\006 \003(\0132\027.system_nrtstate"
  ".Sensor\022-\n\tinterface\030\007 \003(\0132\032.system_nrts"
  "tate.Interfaceb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_overall_5fsystem_5fnrtstate_2eproto = {
    false, false, 1462, descriptor_table_protodef_overall_5fsystem_5fnrtstate_2eproto,
    "overall_system_nrtstate.proto",
    &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_overall_5fsystem_5fnrtstate_2eproto::offsets,
    file_level_metadata_overall_5fsystem_5fnrtstate_2eproto, file_level_enum_descriptors_overall_5fsystem_5fnrtstate_2eproto,
    file_level_service_descriptors_overall_5fsystem_5fnrtstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter() {
  return &descriptor_table_overall_5fsystem_5fnrtstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_overall_5fsystem_5fnrtstate_2eproto(&descriptor_table_overall_5fsystem_5fnrtstate_2eproto);
namespace system_nrtstate {

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.frame_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_id_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.frame_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_frame_id() != 0) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_)
      + sizeof(Header::_impl_.frame_id_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[0]);
}

// ===================================================================

class Slave::_Internal {
 public:
};

Slave::Slave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Slave)
}
Slave::Slave(const Slave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Slave* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slave_name_){}
    , decltype(_impl_.phy_id_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.slave_state_){}
    , decltype(_impl_.is_online_){}
    , decltype(_impl_.is_virtual_){}
    , decltype(_impl_.is_error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slave_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slave_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slave_name().empty()) {
    _this->_impl_.slave_name_.Set(from._internal_slave_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.phy_id_, &from._impl_.phy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_error_) -
    reinterpret_cast<char*>(&_impl_.phy_id_)) + sizeof(_impl_.is_error_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Slave)
}

inline void Slave::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slave_name_){}
    , decltype(_impl_.phy_id_){0}
    , decltype(_impl_.alias_){0}
    , decltype(_impl_.slave_state_){0}
    , decltype(_impl_.is_online_){0}
    , decltype(_impl_.is_virtual_){false}
    , decltype(_impl_.is_error_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slave_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slave_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Slave::~Slave() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Slave)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Slave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slave_name_.Destroy();
}

void Slave::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Slave::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Slave)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slave_name_.ClearToEmpty();
  ::memset(&_impl_.phy_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_error_) -
      reinterpret_cast<char*>(&_impl_.phy_id_)) + sizeof(_impl_.is_error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slave::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string slave_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_slave_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Slave.slave_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 phy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slave_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.slave_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_virtual = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Slave::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Slave)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string slave_name = 1;
  if (!this->_internal_slave_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slave_name().data(), static_cast<int>(this->_internal_slave_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Slave.slave_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slave_name(), target);
  }

  // int32 phy_id = 2;
  if (this->_internal_phy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phy_id(), target);
  }

  // int32 alias = 3;
  if (this->_internal_alias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_alias(), target);
  }

  // int32 slave_state = 4;
  if (this->_internal_slave_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_slave_state(), target);
  }

  // int32 is_online = 5;
  if (this->_internal_is_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_is_online(), target);
  }

  // bool is_virtual = 6;
  if (this->_internal_is_virtual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_virtual(), target);
  }

  // bool is_error = 7;
  if (this->_internal_is_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Slave)
  return target;
}

size_t Slave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Slave)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slave_name = 1;
  if (!this->_internal_slave_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slave_name());
  }

  // int32 phy_id = 2;
  if (this->_internal_phy_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phy_id());
  }

  // int32 alias = 3;
  if (this->_internal_alias() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alias());
  }

  // int32 slave_state = 4;
  if (this->_internal_slave_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slave_state());
  }

  // int32 is_online = 5;
  if (this->_internal_is_online() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_online());
  }

  // bool is_virtual = 6;
  if (this->_internal_is_virtual() != 0) {
    total_size += 1 + 1;
  }

  // bool is_error = 7;
  if (this->_internal_is_error() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Slave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Slave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Slave::GetClassData() const { return &_class_data_; }


void Slave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Slave*>(&to_msg);
  auto& from = static_cast<const Slave&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Slave)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slave_name().empty()) {
    _this->_internal_set_slave_name(from._internal_slave_name());
  }
  if (from._internal_phy_id() != 0) {
    _this->_internal_set_phy_id(from._internal_phy_id());
  }
  if (from._internal_alias() != 0) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_slave_state() != 0) {
    _this->_internal_set_slave_state(from._internal_slave_state());
  }
  if (from._internal_is_online() != 0) {
    _this->_internal_set_is_online(from._internal_is_online());
  }
  if (from._internal_is_virtual() != 0) {
    _this->_internal_set_is_virtual(from._internal_is_virtual());
  }
  if (from._internal_is_error() != 0) {
    _this->_internal_set_is_error(from._internal_is_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Slave::CopyFrom(const Slave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Slave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slave::IsInitialized() const {
  return true;
}

void Slave::InternalSwap(Slave* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slave_name_, lhs_arena,
      &other->_impl_.slave_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slave, _impl_.is_error_)
      + sizeof(Slave::_impl_.is_error_)
      - PROTOBUF_FIELD_OFFSET(Slave, _impl_.phy_id_)>(
          reinterpret_cast<char*>(&_impl_.phy_id_),
          reinterpret_cast<char*>(&other->_impl_.phy_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[1]);
}

// ===================================================================

class Controller::_Internal {
 public:
};

Controller::Controller(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Controller)
}
Controller::Controller(const Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Controller* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slave_){from._impl_.slave_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Controller)
}

inline void Controller::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slave_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Controller)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Controller::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slave_.~RepeatedPtrField();
}

void Controller::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Controller)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slave_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Controller::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .system_nrtstate.Slave slave = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slave(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Controller::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Controller)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .system_nrtstate.Slave slave = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slave_size()); i < n; i++) {
    const auto& repfield = this->_internal_slave(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Controller)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_nrtstate.Slave slave = 1;
  total_size += 1UL * this->_internal_slave_size();
  for (const auto& msg : this->_impl_.slave_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Controller::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Controller::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Controller::GetClassData() const { return &_class_data_; }


void Controller::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Controller*>(&to_msg);
  auto& from = static_cast<const Controller&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Controller)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slave_.MergeFrom(from._impl_.slave_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::InternalSwap(Controller* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.slave_.InternalSwap(&other->_impl_.slave_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Controller::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[2]);
}

// ===================================================================

class Joint::_Internal {
 public:
};

Joint::Joint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Joint)
}
Joint::Joint(const Joint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Joint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_position_){}
    , decltype(_impl_.min_position_){}
    , decltype(_impl_.max_vel_){}
    , decltype(_impl_.min_vel_){}
    , decltype(_impl_.max_acc_){}
    , decltype(_impl_.min_acc_){}
    , decltype(_impl_.max_collision_torque_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_position_, &from._impl_.max_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_collision_torque_) -
    reinterpret_cast<char*>(&_impl_.max_position_)) + sizeof(_impl_.max_collision_torque_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Joint)
}

inline void Joint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_position_){0}
    , decltype(_impl_.min_position_){0}
    , decltype(_impl_.max_vel_){0}
    , decltype(_impl_.min_vel_){0}
    , decltype(_impl_.max_acc_){0}
    , decltype(_impl_.min_acc_){0}
    , decltype(_impl_.max_collision_torque_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Joint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Joint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Joint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Joint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_collision_torque_) -
      reinterpret_cast<char*>(&_impl_.max_position_)) + sizeof(_impl_.max_collision_torque_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Joint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.max_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.min_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.max_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.min_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.max_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_acc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.min_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_collision_torque = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.max_collision_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Joint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Joint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_position = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_position = this->_internal_max_position();
  uint64_t raw_max_position;
  memcpy(&raw_max_position, &tmp_max_position, sizeof(tmp_max_position));
  if (raw_max_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_position(), target);
  }

  // double min_position = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_position = this->_internal_min_position();
  uint64_t raw_min_position;
  memcpy(&raw_min_position, &tmp_min_position, sizeof(tmp_min_position));
  if (raw_min_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_position(), target);
  }

  // double max_vel = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_vel = this->_internal_max_vel();
  uint64_t raw_max_vel;
  memcpy(&raw_max_vel, &tmp_max_vel, sizeof(tmp_max_vel));
  if (raw_max_vel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_vel(), target);
  }

  // double min_vel = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_vel = this->_internal_min_vel();
  uint64_t raw_min_vel;
  memcpy(&raw_min_vel, &tmp_min_vel, sizeof(tmp_min_vel));
  if (raw_min_vel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_vel(), target);
  }

  // double max_acc = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acc = this->_internal_max_acc();
  uint64_t raw_max_acc;
  memcpy(&raw_max_acc, &tmp_max_acc, sizeof(tmp_max_acc));
  if (raw_max_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_acc(), target);
  }

  // double min_acc = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_acc = this->_internal_min_acc();
  uint64_t raw_min_acc;
  memcpy(&raw_min_acc, &tmp_min_acc, sizeof(tmp_min_acc));
  if (raw_min_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_acc(), target);
  }

  // double max_collision_torque = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_collision_torque = this->_internal_max_collision_torque();
  uint64_t raw_max_collision_torque;
  memcpy(&raw_max_collision_torque, &tmp_max_collision_torque, sizeof(tmp_max_collision_torque));
  if (raw_max_collision_torque != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_collision_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Joint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_position = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_position = this->_internal_max_position();
  uint64_t raw_max_position;
  memcpy(&raw_max_position, &tmp_max_position, sizeof(tmp_max_position));
  if (raw_max_position != 0) {
    total_size += 1 + 8;
  }

  // double min_position = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_position = this->_internal_min_position();
  uint64_t raw_min_position;
  memcpy(&raw_min_position, &tmp_min_position, sizeof(tmp_min_position));
  if (raw_min_position != 0) {
    total_size += 1 + 8;
  }

  // double max_vel = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_vel = this->_internal_max_vel();
  uint64_t raw_max_vel;
  memcpy(&raw_max_vel, &tmp_max_vel, sizeof(tmp_max_vel));
  if (raw_max_vel != 0) {
    total_size += 1 + 8;
  }

  // double min_vel = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_vel = this->_internal_min_vel();
  uint64_t raw_min_vel;
  memcpy(&raw_min_vel, &tmp_min_vel, sizeof(tmp_min_vel));
  if (raw_min_vel != 0) {
    total_size += 1 + 8;
  }

  // double max_acc = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acc = this->_internal_max_acc();
  uint64_t raw_max_acc;
  memcpy(&raw_max_acc, &tmp_max_acc, sizeof(tmp_max_acc));
  if (raw_max_acc != 0) {
    total_size += 1 + 8;
  }

  // double min_acc = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_acc = this->_internal_min_acc();
  uint64_t raw_min_acc;
  memcpy(&raw_min_acc, &tmp_min_acc, sizeof(tmp_min_acc));
  if (raw_min_acc != 0) {
    total_size += 1 + 8;
  }

  // double max_collision_torque = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_collision_torque = this->_internal_max_collision_torque();
  uint64_t raw_max_collision_torque;
  memcpy(&raw_max_collision_torque, &tmp_max_collision_torque, sizeof(tmp_max_collision_torque));
  if (raw_max_collision_torque != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Joint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Joint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Joint::GetClassData() const { return &_class_data_; }


void Joint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Joint*>(&to_msg);
  auto& from = static_cast<const Joint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Joint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_position = from._internal_max_position();
  uint64_t raw_max_position;
  memcpy(&raw_max_position, &tmp_max_position, sizeof(tmp_max_position));
  if (raw_max_position != 0) {
    _this->_internal_set_max_position(from._internal_max_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_position = from._internal_min_position();
  uint64_t raw_min_position;
  memcpy(&raw_min_position, &tmp_min_position, sizeof(tmp_min_position));
  if (raw_min_position != 0) {
    _this->_internal_set_min_position(from._internal_min_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_vel = from._internal_max_vel();
  uint64_t raw_max_vel;
  memcpy(&raw_max_vel, &tmp_max_vel, sizeof(tmp_max_vel));
  if (raw_max_vel != 0) {
    _this->_internal_set_max_vel(from._internal_max_vel());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_vel = from._internal_min_vel();
  uint64_t raw_min_vel;
  memcpy(&raw_min_vel, &tmp_min_vel, sizeof(tmp_min_vel));
  if (raw_min_vel != 0) {
    _this->_internal_set_min_vel(from._internal_min_vel());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acc = from._internal_max_acc();
  uint64_t raw_max_acc;
  memcpy(&raw_max_acc, &tmp_max_acc, sizeof(tmp_max_acc));
  if (raw_max_acc != 0) {
    _this->_internal_set_max_acc(from._internal_max_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_acc = from._internal_min_acc();
  uint64_t raw_min_acc;
  memcpy(&raw_min_acc, &tmp_min_acc, sizeof(tmp_min_acc));
  if (raw_min_acc != 0) {
    _this->_internal_set_min_acc(from._internal_min_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_collision_torque = from._internal_max_collision_torque();
  uint64_t raw_max_collision_torque;
  memcpy(&raw_max_collision_torque, &tmp_max_collision_torque, sizeof(tmp_max_collision_torque));
  if (raw_max_collision_torque != 0) {
    _this->_internal_set_max_collision_torque(from._internal_max_collision_torque());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::InternalSwap(Joint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joint, _impl_.max_collision_torque_)
      + sizeof(Joint::_impl_.max_collision_torque_)
      - PROTOBUF_FIELD_OFFSET(Joint, _impl_.max_position_)>(
          reinterpret_cast<char*>(&_impl_.max_position_),
          reinterpret_cast<char*>(&other->_impl_.max_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[3]);
}

// ===================================================================

class Tool::_Internal {
 public:
};

Tool::Tool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Tool)
}
Tool::Tool(const Tool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tool_name().empty()) {
    _this->_impl_.tool_name_.Set(from._internal_tool_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Tool)
}

inline void Tool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.tool_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tool_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tool_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tool::~Tool() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Tool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.tool_name_.Destroy();
}

void Tool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tool::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Tool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.tool_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tool_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Tool.tool_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Tool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Tool.tool_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tool_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Tool)
  return target;
}

size_t Tool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Tool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string tool_name = 1;
  if (!this->_internal_tool_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tool::GetClassData() const { return &_class_data_; }


void Tool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tool*>(&to_msg);
  auto& from = static_cast<const Tool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Tool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_tool_name().empty()) {
    _this->_internal_set_tool_name(from._internal_tool_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tool::CopyFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tool::IsInitialized() const {
  return true;
}

void Tool::InternalSwap(Tool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tool_name_, lhs_arena,
      &other->_impl_.tool_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[4]);
}

// ===================================================================

class Wobj::_Internal {
 public:
};

Wobj::Wobj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Wobj)
}
Wobj::Wobj(const Wobj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Wobj* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.wobj_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wobj_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wobj_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wobj_name().empty()) {
    _this->_impl_.wobj_name_.Set(from._internal_wobj_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Wobj)
}

inline void Wobj::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.wobj_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.wobj_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wobj_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Wobj::~Wobj() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Wobj)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wobj::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.wobj_name_.Destroy();
}

void Wobj::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wobj::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Wobj)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.wobj_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wobj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string wobj_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_wobj_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Wobj.wobj_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wobj::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Wobj)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string wobj_name = 1;
  if (!this->_internal_wobj_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wobj_name().data(), static_cast<int>(this->_internal_wobj_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Wobj.wobj_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_wobj_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Wobj)
  return target;
}

size_t Wobj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Wobj)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string wobj_name = 1;
  if (!this->_internal_wobj_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wobj_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wobj::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Wobj::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wobj::GetClassData() const { return &_class_data_; }


void Wobj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Wobj*>(&to_msg);
  auto& from = static_cast<const Wobj&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Wobj)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_wobj_name().empty()) {
    _this->_internal_set_wobj_name(from._internal_wobj_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wobj::CopyFrom(const Wobj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Wobj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wobj::IsInitialized() const {
  return true;
}

void Wobj::InternalSwap(Wobj* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wobj_name_, lhs_arena,
      &other->_impl_.wobj_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Wobj::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[5]);
}

// ===================================================================

class Load::_Internal {
 public:
};

Load::Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Load)
}
Load::Load(const Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Load* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.load_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.load_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load_name().empty()) {
    _this->_impl_.load_name_.Set(from._internal_load_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Load)
}

inline void Load::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.load_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.load_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Load::~Load() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Load)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Load::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.load_name_.Destroy();
}

void Load::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Load::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Load)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.load_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Load::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string load_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_load_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Load.load_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Load::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Load)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string load_name = 1;
  if (!this->_internal_load_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_name().data(), static_cast<int>(this->_internal_load_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Load.load_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_load_name(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Load)
  return target;
}

size_t Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Load)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string load_name = 1;
  if (!this->_internal_load_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Load::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Load::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Load::GetClassData() const { return &_class_data_; }


void Load::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Load*>(&to_msg);
  auto& from = static_cast<const Load&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Load)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_load_name().empty()) {
    _this->_internal_set_load_name(from._internal_load_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Load::CopyFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Load::IsInitialized() const {
  return true;
}

void Load::InternalSwap(Load* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_name_, lhs_arena,
      &other->_impl_.load_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Load::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[6]);
}

// ===================================================================

class Point::_Internal {
 public:
  static const ::system_nrtstate::Tool& tool(const Point* msg);
  static const ::system_nrtstate::Wobj& wobj(const Point* msg);
};

const ::system_nrtstate::Tool&
Point::_Internal::tool(const Point* msg) {
  return *msg->_impl_.tool_;
}
const ::system_nrtstate::Wobj&
Point::_Internal::wobj(const Point* msg) {
  return *msg->_impl_.wobj_;
}
Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.robottarget_){from._impl_.robottarget_}
    , decltype(_impl_.jointtarget_){from._impl_.jointtarget_}
    , decltype(_impl_.point_name_){}
    , decltype(_impl_.tool_){nullptr}
    , decltype(_impl_.wobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.point_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_name().empty()) {
    _this->_impl_.point_name_.Set(from._internal_point_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tool()) {
    _this->_impl_.tool_ = new ::system_nrtstate::Tool(*from._impl_.tool_);
  }
  if (from._internal_has_wobj()) {
    _this->_impl_.wobj_ = new ::system_nrtstate::Wobj(*from._impl_.wobj_);
  }
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.robottarget_){arena}
    , decltype(_impl_.jointtarget_){arena}
    , decltype(_impl_.point_name_){}
    , decltype(_impl_.tool_){nullptr}
    , decltype(_impl_.wobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.point_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.robottarget_.~RepeatedField();
  _impl_.jointtarget_.~RepeatedField();
  _impl_.point_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tool_;
  if (this != internal_default_instance()) delete _impl_.wobj_;
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robottarget_.Clear();
  _impl_.jointtarget_.Clear();
  _impl_.point_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tool_ != nullptr) {
    delete _impl_.tool_;
  }
  _impl_.tool_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wobj_ != nullptr) {
    delete _impl_.wobj_;
  }
  _impl_.wobj_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string point_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_point_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Point.point_name"));
        } else
          goto handle_unusual;
        continue;
      // .system_nrtstate.Tool tool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .system_nrtstate.Wobj wobj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wobj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double robottarget = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_robottarget(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_robottarget(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double jointtarget = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_jointtarget(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_jointtarget(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string point_name = 1;
  if (!this->_internal_point_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_point_name().data(), static_cast<int>(this->_internal_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Point.point_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_point_name(), target);
  }

  // .system_nrtstate.Tool tool = 2;
  if (this->_internal_has_tool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tool(this),
        _Internal::tool(this).GetCachedSize(), target, stream);
  }

  // .system_nrtstate.Wobj wobj = 3;
  if (this->_internal_has_wobj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::wobj(this),
        _Internal::wobj(this).GetCachedSize(), target, stream);
  }

  // repeated double robottarget = 4;
  if (this->_internal_robottarget_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_robottarget(), target);
  }

  // repeated double jointtarget = 5;
  if (this->_internal_jointtarget_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_jointtarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double robottarget = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_robottarget_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double jointtarget = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_jointtarget_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string point_name = 1;
  if (!this->_internal_point_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_point_name());
  }

  // .system_nrtstate.Tool tool = 2;
  if (this->_internal_has_tool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tool_);
  }

  // .system_nrtstate.Wobj wobj = 3;
  if (this->_internal_has_wobj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wobj_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.robottarget_.MergeFrom(from._impl_.robottarget_);
  _this->_impl_.jointtarget_.MergeFrom(from._impl_.jointtarget_);
  if (!from._internal_point_name().empty()) {
    _this->_internal_set_point_name(from._internal_point_name());
  }
  if (from._internal_has_tool()) {
    _this->_internal_mutable_tool()->::system_nrtstate::Tool::MergeFrom(
        from._internal_tool());
  }
  if (from._internal_has_wobj()) {
    _this->_internal_mutable_wobj()->::system_nrtstate::Wobj::MergeFrom(
        from._internal_wobj());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.robottarget_.InternalSwap(&other->_impl_.robottarget_);
  _impl_.jointtarget_.InternalSwap(&other->_impl_.jointtarget_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_name_, lhs_arena,
      &other->_impl_.point_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.wobj_)
      + sizeof(Point::_impl_.wobj_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.tool_)>(
          reinterpret_cast<char*>(&_impl_.tool_),
          reinterpret_cast<char*>(&other->_impl_.tool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[7]);
}

// ===================================================================

class Model::_Internal {
 public:
};

Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Model* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_){from._impl_.joint_}
    , decltype(_impl_.tools_){from._impl_.tools_}
    , decltype(_impl_.wobjs_){from._impl_.wobjs_}
    , decltype(_impl_.loads_){from._impl_.loads_}
    , decltype(_impl_.teach_points_){from._impl_.teach_points_}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type().empty()) {
    _this->_impl_.model_type_.Set(from._internal_model_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Model)
}

inline void Model::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_){arena}
    , decltype(_impl_.tools_){arena}
    , decltype(_impl_.wobjs_){arena}
    , decltype(_impl_.loads_){arena}
    , decltype(_impl_.teach_points_){arena}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.joint_.~RepeatedPtrField();
  _impl_.tools_.~RepeatedPtrField();
  _impl_.wobjs_.~RepeatedPtrField();
  _impl_.loads_.~RepeatedPtrField();
  _impl_.teach_points_.~RepeatedPtrField();
  _impl_.model_name_.Destroy();
  _impl_.model_type_.Destroy();
}

void Model::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joint_.Clear();
  _impl_.tools_.Clear();
  _impl_.wobjs_.Clear();
  _impl_.loads_.Clear();
  _impl_.teach_points_.Clear();
  _impl_.model_name_.ClearToEmpty();
  _impl_.model_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Model.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Model.model_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Joint joint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Tool tools = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Wobj wobjs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wobjs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Load loads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Point teach_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teach_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Model.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // string model_type = 2;
  if (!this->_internal_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Model.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // repeated .system_nrtstate.Joint joint = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_joint_size()); i < n; i++) {
    const auto& repfield = this->_internal_joint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Tool tools = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tools_size()); i < n; i++) {
    const auto& repfield = this->_internal_tools(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Wobj wobjs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wobjs_size()); i < n; i++) {
    const auto& repfield = this->_internal_wobjs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Load loads = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loads_size()); i < n; i++) {
    const auto& repfield = this->_internal_loads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Point teach_points = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teach_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_teach_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_nrtstate.Joint joint = 3;
  total_size += 1UL * this->_internal_joint_size();
  for (const auto& msg : this->_impl_.joint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Tool tools = 5;
  total_size += 1UL * this->_internal_tools_size();
  for (const auto& msg : this->_impl_.tools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Wobj wobjs = 6;
  total_size += 1UL * this->_internal_wobjs_size();
  for (const auto& msg : this->_impl_.wobjs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Load loads = 7;
  total_size += 1UL * this->_internal_loads_size();
  for (const auto& msg : this->_impl_.loads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Point teach_points = 8;
  total_size += 1UL * this->_internal_teach_points_size();
  for (const auto& msg : this->_impl_.teach_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string model_type = 2;
  if (!this->_internal_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }


void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Model*>(&to_msg);
  auto& from = static_cast<const Model&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Model)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.joint_.MergeFrom(from._impl_.joint_);
  _this->_impl_.tools_.MergeFrom(from._impl_.tools_);
  _this->_impl_.wobjs_.MergeFrom(from._impl_.wobjs_);
  _this->_impl_.loads_.MergeFrom(from._impl_.loads_);
  _this->_impl_.teach_points_.MergeFrom(from._impl_.teach_points_);
  if (!from._internal_model_name().empty()) {
    _this->_internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_model_type().empty()) {
    _this->_internal_set_model_type(from._internal_model_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joint_.InternalSwap(&other->_impl_.joint_);
  _impl_.tools_.InternalSwap(&other->_impl_.tools_);
  _impl_.wobjs_.InternalSwap(&other->_impl_.wobjs_);
  _impl_.loads_.InternalSwap(&other->_impl_.loads_);
  _impl_.teach_points_.InternalSwap(&other->_impl_.teach_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_, lhs_arena,
      &other->_impl_.model_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[8]);
}

// ===================================================================

class Subsystem::_Internal {
 public:
};

Subsystem::Subsystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Subsystem)
}
Subsystem::Subsystem(const Subsystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subsystem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subsystem_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subsystem_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsystem_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subsystem_name().empty()) {
    _this->_impl_.subsystem_name_.Set(from._internal_subsystem_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Subsystem)
}

inline void Subsystem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subsystem_name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subsystem_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsystem_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Subsystem::~Subsystem() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Subsystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subsystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subsystem_name_.Destroy();
}

void Subsystem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subsystem::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Subsystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subsystem_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subsystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subsystem_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subsystem_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Subsystem.subsystem_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subsystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Subsystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subsystem_name = 1;
  if (!this->_internal_subsystem_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subsystem_name().data(), static_cast<int>(this->_internal_subsystem_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Subsystem.subsystem_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subsystem_name(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Subsystem)
  return target;
}

size_t Subsystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Subsystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subsystem_name = 1;
  if (!this->_internal_subsystem_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subsystem_name());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subsystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subsystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subsystem::GetClassData() const { return &_class_data_; }


void Subsystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subsystem*>(&to_msg);
  auto& from = static_cast<const Subsystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Subsystem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subsystem_name().empty()) {
    _this->_internal_set_subsystem_name(from._internal_subsystem_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subsystem::CopyFrom(const Subsystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Subsystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsystem::IsInitialized() const {
  return true;
}

void Subsystem::InternalSwap(Subsystem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subsystem_name_, lhs_arena,
      &other->_impl_.subsystem_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subsystem, _impl_.state_)
      + sizeof(Subsystem::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Subsystem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subsystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[9]);
}

// ===================================================================

class Sensor::_Internal {
 public:
};

Sensor::Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_name().empty()) {
    _this->_impl_.sensor_name_.Set(from._internal_sensor_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Sensor)
}

inline void Sensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_name_.Destroy();
}

void Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Sensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Sensor.sensor_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Sensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (!this->_internal_sensor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Sensor.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Sensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_name = 1;
  if (!this->_internal_sensor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_name());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor::GetClassData() const { return &_class_data_; }


void Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Sensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensor_name().empty()) {
    _this->_internal_set_sensor_name(from._internal_sensor_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_name_, lhs_arena,
      &other->_impl_.sensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor, _impl_.state_)
      + sizeof(Sensor::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Sensor, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[10]);
}

// ===================================================================

class Interface::_Internal {
 public:
};

Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Interface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_name().empty()) {
    _this->_impl_.interface_name_.Set(from._internal_interface_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.Interface)
}

inline void Interface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:system_nrtstate.Interface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_name_.Destroy();
}

void Interface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interface_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "system_nrtstate.Interface.interface_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_name = 1;
  if (!this->_internal_interface_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "system_nrtstate.Interface.interface_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_name = 1;
  if (!this->_internal_interface_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_name());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }


void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Interface*>(&to_msg);
  auto& from = static_cast<const Interface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.Interface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_name().empty()) {
    _this->_internal_set_interface_name(from._internal_interface_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_, lhs_arena,
      &other->_impl_.interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface, _impl_.state_)
      + sizeof(Interface::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Interface, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[11]);
}

// ===================================================================

class SystemNrtState::_Internal {
 public:
  static const ::system_nrtstate::Header& head(const SystemNrtState* msg);
  static const ::system_nrtstate::Controller& controller(const SystemNrtState* msg);
};

const ::system_nrtstate::Header&
SystemNrtState::_Internal::head(const SystemNrtState* msg) {
  return *msg->_impl_.head_;
}
const ::system_nrtstate::Controller&
SystemNrtState::_Internal::controller(const SystemNrtState* msg) {
  return *msg->_impl_.controller_;
}
SystemNrtState::SystemNrtState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:system_nrtstate.SystemNrtState)
}
SystemNrtState::SystemNrtState(const SystemNrtState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemNrtState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){from._impl_.model_}
    , decltype(_impl_.subsystem_){from._impl_.subsystem_}
    , decltype(_impl_.sensor_){from._impl_.sensor_}
    , decltype(_impl_.interface_){from._impl_.interface_}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.controller_){nullptr}
    , decltype(_impl_.system_running_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::system_nrtstate::Header(*from._impl_.head_);
  }
  if (from._internal_has_controller()) {
    _this->_impl_.controller_ = new ::system_nrtstate::Controller(*from._impl_.controller_);
  }
  _this->_impl_.system_running_state_ = from._impl_.system_running_state_;
  // @@protoc_insertion_point(copy_constructor:system_nrtstate.SystemNrtState)
}

inline void SystemNrtState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){arena}
    , decltype(_impl_.subsystem_){arena}
    , decltype(_impl_.sensor_){arena}
    , decltype(_impl_.interface_){arena}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.controller_){nullptr}
    , decltype(_impl_.system_running_state_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SystemNrtState::~SystemNrtState() {
  // @@protoc_insertion_point(destructor:system_nrtstate.SystemNrtState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemNrtState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.~RepeatedPtrField();
  _impl_.subsystem_.~RepeatedPtrField();
  _impl_.sensor_.~RepeatedPtrField();
  _impl_.interface_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
  if (this != internal_default_instance()) delete _impl_.controller_;
}

void SystemNrtState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemNrtState::Clear() {
// @@protoc_insertion_point(message_clear_start:system_nrtstate.SystemNrtState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.Clear();
  _impl_.subsystem_.Clear();
  _impl_.sensor_.Clear();
  _impl_.interface_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.controller_ != nullptr) {
    delete _impl_.controller_;
  }
  _impl_.controller_ = nullptr;
  _impl_.system_running_state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemNrtState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .system_nrtstate.Header head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool system_running_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.system_running_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Model model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .system_nrtstate.Controller controller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Subsystem subsystem = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subsystem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Sensor sensor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .system_nrtstate.Interface interface = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemNrtState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_nrtstate.SystemNrtState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .system_nrtstate.Header head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // bool system_running_state = 2;
  if (this->_internal_system_running_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_system_running_state(), target);
  }

  // repeated .system_nrtstate.Model model = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_size()); i < n; i++) {
    const auto& repfield = this->_internal_model(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .system_nrtstate.Controller controller = 4;
  if (this->_internal_has_controller()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::controller(this),
        _Internal::controller(this).GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Subsystem subsystem = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subsystem_size()); i < n; i++) {
    const auto& repfield = this->_internal_subsystem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Sensor sensor = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .system_nrtstate.Interface interface = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interface_size()); i < n; i++) {
    const auto& repfield = this->_internal_interface(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_nrtstate.SystemNrtState)
  return target;
}

size_t SystemNrtState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_nrtstate.SystemNrtState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .system_nrtstate.Model model = 3;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->_impl_.model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Subsystem subsystem = 5;
  total_size += 1UL * this->_internal_subsystem_size();
  for (const auto& msg : this->_impl_.subsystem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Sensor sensor = 6;
  total_size += 1UL * this->_internal_sensor_size();
  for (const auto& msg : this->_impl_.sensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .system_nrtstate.Interface interface = 7;
  total_size += 1UL * this->_internal_interface_size();
  for (const auto& msg : this->_impl_.interface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .system_nrtstate.Header head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // .system_nrtstate.Controller controller = 4;
  if (this->_internal_has_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controller_);
  }

  // bool system_running_state = 2;
  if (this->_internal_system_running_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemNrtState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemNrtState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemNrtState::GetClassData() const { return &_class_data_; }


void SystemNrtState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemNrtState*>(&to_msg);
  auto& from = static_cast<const SystemNrtState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:system_nrtstate.SystemNrtState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_.MergeFrom(from._impl_.model_);
  _this->_impl_.subsystem_.MergeFrom(from._impl_.subsystem_);
  _this->_impl_.sensor_.MergeFrom(from._impl_.sensor_);
  _this->_impl_.interface_.MergeFrom(from._impl_.interface_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::system_nrtstate::Header::MergeFrom(
        from._internal_head());
  }
  if (from._internal_has_controller()) {
    _this->_internal_mutable_controller()->::system_nrtstate::Controller::MergeFrom(
        from._internal_controller());
  }
  if (from._internal_system_running_state() != 0) {
    _this->_internal_set_system_running_state(from._internal_system_running_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemNrtState::CopyFrom(const SystemNrtState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_nrtstate.SystemNrtState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNrtState::IsInitialized() const {
  return true;
}

void SystemNrtState::InternalSwap(SystemNrtState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_.InternalSwap(&other->_impl_.model_);
  _impl_.subsystem_.InternalSwap(&other->_impl_.subsystem_);
  _impl_.sensor_.InternalSwap(&other->_impl_.sensor_);
  _impl_.interface_.InternalSwap(&other->_impl_.interface_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemNrtState, _impl_.system_running_state_)
      + sizeof(SystemNrtState::_impl_.system_running_state_)
      - PROTOBUF_FIELD_OFFSET(SystemNrtState, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemNrtState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_getter, &descriptor_table_overall_5fsystem_5fnrtstate_2eproto_once,
      file_level_metadata_overall_5fsystem_5fnrtstate_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace system_nrtstate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::system_nrtstate::Header*
Arena::CreateMaybeMessage< ::system_nrtstate::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Slave*
Arena::CreateMaybeMessage< ::system_nrtstate::Slave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Slave >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Controller*
Arena::CreateMaybeMessage< ::system_nrtstate::Controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Controller >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Joint*
Arena::CreateMaybeMessage< ::system_nrtstate::Joint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Joint >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Tool*
Arena::CreateMaybeMessage< ::system_nrtstate::Tool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Tool >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Wobj*
Arena::CreateMaybeMessage< ::system_nrtstate::Wobj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Wobj >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Load*
Arena::CreateMaybeMessage< ::system_nrtstate::Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Load >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Point*
Arena::CreateMaybeMessage< ::system_nrtstate::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Model*
Arena::CreateMaybeMessage< ::system_nrtstate::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Subsystem*
Arena::CreateMaybeMessage< ::system_nrtstate::Subsystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Subsystem >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Sensor*
Arena::CreateMaybeMessage< ::system_nrtstate::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::Interface*
Arena::CreateMaybeMessage< ::system_nrtstate::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::system_nrtstate::SystemNrtState*
Arena::CreateMaybeMessage< ::system_nrtstate::SystemNrtState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_nrtstate::SystemNrtState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
